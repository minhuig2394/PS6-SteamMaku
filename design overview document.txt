names: Daphne Wang, Min Hui Guan 
netids: dw443, mg797


Summary : 

	We implemented the SteamMaku with full features.  We wrote helper functions for Game in separate modules called Bullet, Ufo, and Player to prevent Game from being too long and difficult to test.  It also allowed us to build the game bottom-up.  

Instructions:
	 In order to run our game, the Makefile section must be edited to look like this:
	 game/game.exe:               \
        	shared/shared.cma    \
        	game/netgraphics.cmo \
        	game/ufo.cmo         \
        	game/bullet.cmo      \
        	game/player.cmo      \
        	game/game.cmo        \
        	game/server.cmo

Design and implementation:
	 Document and discuss the choices you made in order to
	 meet the game specification. There should be several aspects of this documentation.

• Modules:
Discuss how you split the program into modules, what purpose these modules serve, and any invariants maintained. Also discuss their interfaces.

Aside from the game.ml file, we created separate modules for players, bullets, and ufos 
- resulting in the files player.ml, player.mli, bullet.ml, bullet.mli, ufo.ml, ufo.mli.  

The modules were created so that game.ml would not be overloaded with code, thus making coding and debugging more difficult. The modules allow us to separate code more efficiently and locate bugs in the code faster. The modules also allow us to individually code without having to rely on one another's code. 

We decided to put UFOs and Powers in one module because you only create power ups when UFOs are destroyed. Bullet is dedicated for creating bullets and for updating, so it made sense that the other types of objects are created and handled elsewhere. 

Bullet’s interface only provides the function names for creating bullets, updating and deleting.  This is because they are the only ones needed by other modules and all other functions in Bullet are basically helper functions for these main functions.  The types of the records used in Bullet are exposed in the mli file because they are needed in the communication between Game and Bullet.  

Ufo’s interface provides functions required in Game and Bullet.  It includes the functions for creating UFOs and changing the velocity of UFOs used in Game and the collision detection function and position setting of UFOs required for the update functions in Bullet.  

Player’s interface provides functions 




• Architecture. Discuss how your modules interact with each other, how they communicate with each other, and how they depend on each other.

The Player module calls upon the Bullet module in order to calculate whether or not the player has enough charge to shoot the bullets. Bullet calls on Ufo to update positions of UFOs and power ups and to check for collisions. 

• Code design. Discuss any notable algorithms employed by your program, and which data structures you used. Mention any tradeoffs you made between code simplicity and efficiency.

We decided upon using records instead of tuples, as it made our code cleaner and easier to read. It was also easier to code as we could easily edit parts of a record, instead of having to match a tuple in order to change information of the tuple. We chose not to make most of our records mutable as that could've posed concurrency problems. The only mutable record we used is in Bullet, to simplify code. But it is used mostly internally, and is only used outside Bullet to pass updated information.  It is not created anywhere else.  

• Implementation. Discuss the implementation strategy you used (top-down, bottom- up). Also include any challenges you ran into while coding, any code reuse or revision you employed, and what the rough division of work was between your group members.

Our implementation was more of a bottom-up strategy, since we started with just handling creation of bullets and movements of players and bullets.  We built upon that with collision functions and the Ufo module.  

The major challenge while coding was to make code short and efficient.  We ran into major problems with this in coding the update function, as we coded it at first based on intuitive logic and ended up with a lot of code reusing. We found that separating the update function into different helper functions would ensure shorter code that was easier to test.  We also did our best to eliminate reused code that we didn’t need.  

We divided the work between ourselves by having one member implement Player and Game while the other implemented Bullet and Ufo. We did everything else together.  

Testing: 
	Describe your test plan, and discuss any issues that you ran into while carrying out this test plan. Are you confident that your testing gives good enough coverage of all possible scenarios? Remember that testing is not something that should only be done at the end, but rather, it should be done incrementally, as you write parts of the program. You need to convince the staff that you exercised due diligence in validating your program.

We created unit testing files for each of our modules.  We tested the helper functions first.  Once they worked, we were able to test the functions that used them.  For example to test our collisions function we would test something like the following:
We had a function to check for intersecting radii: 
let collide (center1:position) (r1:int) (center2:position) (r2:int):bool = 
  let radius = float_of_int (r1 + r2) in 
  let diff = subt_v center1 center2 in 
  ((fst diff)*.(fst diff) +. (snd diff)*.(snd diff)) < radius*.radius 
We tested it with several cases to see if it worked as expected.  
Then we tested our collision function for players and bullets.  
For the collision function: 
let hit (b:bullet) (p:player_char) :bool= 
  collide b.b_pos b.b_radius p.p_pos p.p_radius
We would make tests like :
let hit_test = (hit bullet1 rplayer) = true
let hit_test2 = (hit bullet3 bplayer) = true
let hit_test3 = (hit bullet2 rplayer) = false
where bullet1, bullet2, and bullet3 are sample bullets of different properties and rplayer and bplayer are the red player and blue player respectively.  

We tried to go for corner cases, to make sure our code would work for them.  Our testing should provide fairly good coverage of most testable scenarios.

We also tested by running the game to see if it showed what we believed to be expected behavior.  This makes it easier to test for overall functionality than unit testing.  

Extensibility:
	 How easily could your code be extended to add additional features? Discuss what one would have to change in order to add some new functionality. Consider each of the following cases:
	• New bullet types.
	We would have to change our create function to match for the new bullet types and write helper functions that help create those bullets in our Bullet module as well as some minor edits in Game to handle the new bullet costs.  But otherwise, we could easily extend our code to add new bullets.  
	• New types of collectible items (besides power).
	This would not be as simple.  We would need a create function for these items and, depending on when and how they are created, either make separate functions or add to the existing update_ufo function in Bullet, where all the update functions are. However, as long as they are not involved in bullet collisions, it is not too hard to check for them when updating.   
	• More interesting bomb effects.
	It would probably not involve too much change, since bombs are generally handled in Player and only require some minor helper functions in other modules, like the delete_all function in Bullet, which clears the gui of all bullets.  

	• Neutral enemies that fire at both players.
	This would require major changes to all code because the entire game is built on that there are two players.  We would have to make drastic changes to the update functions that look for bullet collisions.  

Known problems:
	 Discuss any known problems with your implementation, including missing functionality, bugs, and incorrect documentation in the code.
	Our implementation of Bullet is a bit long, and there are probably ways to write the functions in a clearer, more efficient manner.  It has, however, been improved many times.  

	 
Comments: 
	Express your opinions about the assignment. This section of the overview document will not be graded, but it can earn good karma. You might address such questions as:
	
	• How much time did you spend on the assignment? How was it divided between designing, coding, and testing?
	We spent at least 30 hours on this assignment, distributed among several days.  Designing took a day or two.  Coding took a lot of time.  Testing also took a lot of time.  We spent perhaps a sixth of the time on design, two thirds of the rest on coding and the rest of that on testing. 
	
	• What advice should we have given you before you started?
	I feel the writeup,piazza and design doc meeting provided us with enough information to complete this assignment without too much problem. 
	
	• What was surprising about the assignment?
	The gui is amazing.  
	
	• What was hard about the assignment?
	It was hard to keep track of all so many elements when testing and trying to come up with an "expected" result to match to the result the functions gave.  
	
	• What did you like or dislike about the assignment?
	We really like the prologue and the gui.  We also found the coding process to be fun at times. 	
